{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Front-End\\\\final\\\\src\\\\commponent\\\\Nickname\\\\Nickname.js\",\n  _s = $RefreshSig$();\nimport \"./Nickname.css\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditableInput() {\n  _s();\n  const [inputValue, setInputValue] = useState(\"\"); // input의 현재 값\n  const [savedValue, setSavedValue] = useState(\"\"); // 저장된 값\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 창의 상태\n  const inputRef = useRef(null); // input 엘리먼트를 참조하는 ref\n\n  // 수정 버튼을 클릭했을 때의 핸들러\n  const handleEditClick = () => {\n    setInputValue(\"\"); // input 값을 초기화\n    setIsModalOpen(true); // 모달 창을 엽니다\n  };\n\n  // 저장 버튼을 클릭했을 때의 핸들러\n  const handleSaveClick = () => {\n    setSavedValue(inputValue); // 새로운 값을 저장\n    setIsModalOpen(false); // 모달 창을 닫습니다\n  };\n\n  // input 값이 변경되었을 때의 핸들러\n  const handleInputChange = event => {\n    setInputValue(event.target.value); // input 값을 업데이트\n  };\n\n  // 모달을 닫는 핸들러\n  const handleCloseModal = () => {\n    setIsModalOpen(false); // 모달 창을 닫습니다\n  };\n\n  // Enter 키를 감지하는 핸들러\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      handleSaveClick(); // Enter 키를 눌렀을 때 저장\n    }\n  };\n\n  // 모달이 열릴 때 input에 포커스를 맞추기 위한 useEffect\n  useEffect(() => {\n    if (isModalOpen && inputRef.current) {\n      inputRef.current.focus(); // input 엘리먼트에 포커스 맞추기\n    }\n  }, [isModalOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box4\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pencil\",\n      onClick: handleEditClick,\n      children: \"\\uC218\\uC815\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"saveName\",\n      children: savedValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uC774\\uB984 \\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: inputRef // input 엘리먼트를 참조\n          ,\n          value: inputValue,\n          onChange: handleInputChange,\n          onKeyDown: handleKeyDown // Enter 키 감지\n          ,\n          placeholder: \"Enter new value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveClick,\n          children: \"\\uC800\\uC7A5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCloseModal,\n          children: \"\\uCDE8\\uC18C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(EditableInput, \"SuApQCzUbcy3jDIYqnvRemeooI4=\");\n_c = EditableInput;\nexport default EditableInput;\nvar _c;\n$RefreshReg$(_c, \"EditableInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","EditableInput","_s","inputValue","setInputValue","savedValue","setSavedValue","isModalOpen","setIsModalOpen","inputRef","handleEditClick","handleSaveClick","handleInputChange","event","target","value","handleCloseModal","handleKeyDown","key","current","focus","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/Front-End/final/src/commponent/Nickname/Nickname.js"],"sourcesContent":["import \"./Nickname.css\";\r\n\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\n\r\nfunction EditableInput() {\r\n  const [inputValue, setInputValue] = useState(\"\"); // input의 현재 값\r\n  const [savedValue, setSavedValue] = useState(\"\"); // 저장된 값\r\n  const [isModalOpen, setIsModalOpen] = useState(false); // 모달 창의 상태\r\n  const inputRef = useRef(null); // input 엘리먼트를 참조하는 ref\r\n\r\n  // 수정 버튼을 클릭했을 때의 핸들러\r\n  const handleEditClick = () => {\r\n    setInputValue(\"\"); // input 값을 초기화\r\n    setIsModalOpen(true); // 모달 창을 엽니다\r\n  };\r\n\r\n  // 저장 버튼을 클릭했을 때의 핸들러\r\n  const handleSaveClick = () => {\r\n    setSavedValue(inputValue); // 새로운 값을 저장\r\n    setIsModalOpen(false); // 모달 창을 닫습니다\r\n  };\r\n\r\n  // input 값이 변경되었을 때의 핸들러\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value); // input 값을 업데이트\r\n  };\r\n\r\n  // 모달을 닫는 핸들러\r\n  const handleCloseModal = () => {\r\n    setIsModalOpen(false); // 모달 창을 닫습니다\r\n  };\r\n\r\n  // Enter 키를 감지하는 핸들러\r\n  const handleKeyDown = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleSaveClick(); // Enter 키를 눌렀을 때 저장\r\n    }\r\n  };\r\n\r\n  // 모달이 열릴 때 input에 포커스를 맞추기 위한 useEffect\r\n  useEffect(() => {\r\n    if (isModalOpen && inputRef.current) {\r\n      inputRef.current.focus(); // input 엘리먼트에 포커스 맞추기\r\n    }\r\n  }, [isModalOpen]);\r\n\r\n  return (\r\n    <div className=\"box4\">\r\n      <button className=\"pencil\" onClick={handleEditClick}>\r\n        수정\r\n      </button>\r\n      <p className=\"saveName\">{savedValue}</p>\r\n      {/* 저장된 값을 보여주는 p 태그 */}\r\n      {isModalOpen && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <h2>이름 수정</h2>\r\n            <input\r\n              type=\"text\"\r\n              ref={inputRef} // input 엘리먼트를 참조\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n              onKeyDown={handleKeyDown} // Enter 키 감지\r\n              placeholder=\"Enter new value\"\r\n            />\r\n            <button onClick={handleSaveClick}>저장</button>\r\n            <button onClick={handleCloseModal}>취소</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditableInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}